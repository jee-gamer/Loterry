swagger: "2.0"
info:
  title: Data Service API
  description: Lottery bot Data Service which stores Users info, Lotteries and Bets.
  license:
    name: APLv2
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.0.1
basePath: /api
paths:
    /users:
      get:
        operationId: api.get_user
        description: Returns an information about users registered in the service
        produces:
          - application/json
        parameters:
          - in: query
            name: id
            type: integer
            required: true
        responses:
          '200':
            description: List of user data objects
            schema:
              type: array
              items:
                type: string
          '400':
            description: Generic error
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: "User is not found in the database"
      post:
        operationId: api.post_user
        description: Registers new user
        consumes:
          - application/json
        produces:
          - application/json
        parameters:
          - name: body
            in: body
            required: true
            schema:
              # Body schema with atomic property examples
              type: object
              required:
                - id
                - alias
                - firstName
                - lastName
              properties:
                id:
                  type: integer
                  example: 0
                alias:
                  type: string
                  example: "ur dad"
                firstName:
                  type: string
                  example: "haha"
                lastName:
                  type: string
                  example: "haha"

        responses:
          '201':
            description: Created

    /users_vote:
      get:
        operationId: api.get_user_vote
        description: Returns an information about user vote registered in the service
        produces:
          - application/json
        parameters:
          - in: query
            name: id
            type: integer
            required: true
        responses:
          '200':
            description: List of user data objects
            schema:
              type: array
              items:
                type: string
          '400':
            description: Generic error
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: "User is not found in the database"
      post:
        operationId: api.post_user_vote
        description: Registers new bet
        consumes:
          - application/json
        produces:
          - application/json
        parameters:
          - name: body
            in: body
            required: true
            schema:
              # Body schema with atomic property examples
              type: object
              required:
                - idUser
                - idLottery
                - userBet
              properties:
                idUser:
                  type: integer
                  example: 0
                idLottery:
                  type: integer
                  example: 99
                userBet:
                  type: string
                  example: "banana"

        responses:
          '201':
            description: Created